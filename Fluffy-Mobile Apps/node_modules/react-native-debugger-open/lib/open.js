'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var homeEnv = process.platform === 'win32' ? 'USERPROFILE' : 'HOME';
var portFile = _path2.default.join(process.env[homeEnv], '.rndebugger_port');

function connectToRND(rndPath, log, cb) {
  var port = void 0;
  try {
    port = _fs2.default.readFileSync(portFile, 'utf-8');
  } catch (e) {
    if (log) {
      console.log('\n[RNDebugger] The port file `$HOME/.rndebugger_port` not found\n' + 'Maybe the React Native Debugger (^0.3) is not open?\n' + '(Please visit https://github.com/jhen0409/react-native-debugger#installation)\n');
    }
    return cb(false);
  }
  var connection = _net2.default.createConnection({ port }, function () {
    var pass = false;
    connection.setEncoding('utf-8');
    connection.write(JSON.stringify({ path: rndPath }));
    connection.on('data', function (data) {
      pass = data === 'success';
      connection.end();
    });
    var timeoutId = setTimeout(function () {
      if (log) {
        console.log(`\n[RNDebugger] Cannot connect to server with port ${port}.\n`);
      }
      connection.end();
    }, 1000);
    connection.on('end', function () {
      clearTimeout(timeoutId);
      if (!pass && log) {
        console.log('\n[RNDebugger] Try to set port of React Native packager failed.\n');
      }
      cb(pass);
    });
  });
}

exports.default = function (_ref, cb) {
  var port = _ref.port;

  var rndPath = `rndebugger://set-debugger-loc?host=localhost&port=${port}`;

  if (process.platform === 'darwin') {
    var env = Object.assign({}, process.env);
    // This env is specified from Expo (and CRNA), we need avoid it included in rndebugger
    delete env.ELECTRON_RUN_AS_NODE;
    _child_process2.default.spawn('open', ['-g', '-a', 'React Native Debugger', rndPath], { env }).once('close', function (code) {
      if (code > 0) {
        connectToRND(rndPath, false, function (pass) {
          if (!pass) {
            console.log("\n[RNDebugger] Cannot open the app, maybe you haven't install the app?\n" + 'Run `brew update && brew cask install react-native-debugger` ' + 'or download from https://github.com/jhen0409/react-native-debugger/releases\n');
          }
          cb(pass, true);
        });
      } else {
        cb(true);
      }
    });
  } else {
    connectToRND(rndPath, true, function (pass) {
      cb(pass, true);
    });
  }
};